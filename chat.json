{"total_tokens":1353,"files":[{"path":"README.md","tokens":73,"contents":"# bun-sqlite-benchmark\n\nTo install dependencies:\n\n```bash\nbun install\n```\n\nTo run:\n\n```bash\nbun run index.ts\n```\n\nThis project was created using `bun init` in bun v1.1.24. [Bun](https://bun.sh) is a fast all-in-one JavaScript runtime.\n"},{"path":"bun-sqlite-benchmark.js","tokens":757,"contents":"#!/usr/bin/env bun\nimport { Database } from 'bun:sqlite';\nimport { cpus } from 'os';\nimport { performance } from 'perf_hooks';\n\nconst DB_FILE = 'benchmark.db';\nconst NUM_RECORDS = 1000000;\nconst NUM_WORKERS = cpus().length;\n\nasync function runBenchmark() {\n  console.log(`Starting Bun SQLite benchmark with ${NUM_WORKERS} workers...`);\n\n  // Initialize database\n  const db = new Database(DB_FILE);\n  db.exec('DROP TABLE IF EXISTS users');\n  db.exec('CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT, email TEXT)');\n\n  // Benchmark insert\n  console.log(`Inserting ${NUM_RECORDS} records...`);\n  const insertStart = performance.now();\n  await runInsertWorkers(db);\n  const insertEnd = performance.now();\n  const insertTime = insertEnd - insertStart;\n  console.log(`Insert time: ${insertTime.toFixed(2)} ms`);\n  console.log(`Inserts per second: ${(NUM_RECORDS / (insertTime / 1000)).toFixed(2)}`);\n\n  // Verify number of inserted records\n  const count = db.query('SELECT COUNT(*) as count FROM users').get().count;\n  console.log(`Actual number of records inserted: ${count}`);\n\n  // Benchmark select\n  console.log(`Selecting ${NUM_RECORDS} records...`);\n  const selectStart = performance.now();\n  await runSelectWorkers(db);\n  const selectEnd = performance.now();\n  const selectTime = selectEnd - selectStart;\n  console.log(`Select time: ${selectTime.toFixed(2)} ms`);\n  console.log(`Selects per second: ${(NUM_RECORDS / (selectTime / 1000)).toFixed(2)}`);\n\n  db.close();\n  console.log('Benchmark completed.');\n}\n\nasync function runInsertWorkers(db) {\n  const workers = [];\n  const recordsPerWorker = Math.ceil(NUM_RECORDS / NUM_WORKERS);\n\n  const insertStmt = db.prepare('INSERT INTO users (name, email) VALUES (?, ?)');\n\n  for (let i = 0; i \u003c NUM_WORKERS; i++) {\n    const start = i * recordsPerWorker;\n    const end = Math.min((i + 1) * recordsPerWorker, NUM_RECORDS);\n\n    const worker = new Worker(new URL('./worker.js', import.meta.url));\n    workers.push(worker);\n\n    worker.postMessage({ operation: 'generate', start, end });\n  }\n\n  await Promise.all(workers.map(worker =\u003e\n    new Promise((resolve) =\u003e {\n      worker.onmessage = (event) =\u003e {\n        const records = event.data;\n        db.transaction(() =\u003e {\n          for (const record of records) {\n            insertStmt.run(record.name, record.email);\n          }\n        })();\n        worker.terminate();\n        resolve();\n      };\n    })\n  ));\n}\n\nasync function runSelectWorkers(db) {\n  const workers = [];\n  const recordsPerWorker = Math.ceil(NUM_RECORDS / NUM_WORKERS);\n\n  for (let i = 0; i \u003c NUM_WORKERS; i++) {\n    const start = i * recordsPerWorker;\n    const end = Math.min((i + 1) * recordsPerWorker, NUM_RECORDS);\n\n    const worker = new Worker(new URL('./worker.js', import.meta.url));\n    workers.push(worker);\n\n    worker.postMessage({ operation: 'select', start, end });\n  }\n\n  await Promise.all(workers.map(worker =\u003e\n    new Promise((resolve) =\u003e {\n      worker.onmessage = () =\u003e {\n        worker.terminate();\n        resolve();\n      };\n    })\n  ));\n}\n\nrunBenchmark();\n\n// Export the runBenchmark function for potential reuse\nexport { runBenchmark };"},{"path":"index.ts","tokens":7,"contents":"console.log(\"Hello via Bun!\");"},{"path":"package.json","tokens":71,"contents":"{\n  \"name\": \"bun-sqlite-benchmark\",\n  \"module\": \"bun-sqlite-benchmark.js\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"build\": \"bun build ./bun-sqlite-benchmark.js --compile --outfile bun-sqlite-benchmark\"\n  }\n}\n"},{"path":"tsconfig.json","tokens":176,"contents":"{\n  \"compilerOptions\": {\n    // Enable latest features\n    \"lib\": [\"ESNext\", \"DOM\"],\n    \"target\": \"ESNext\",\n    \"module\": \"ESNext\",\n    \"moduleDetection\": \"force\",\n    \"jsx\": \"react-jsx\",\n    \"allowJs\": true,\n\n    // Bundler mode\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"verbatimModuleSyntax\": true,\n    \"noEmit\": true,\n\n    // Best practices\n    \"strict\": true,\n    \"skipLibCheck\": true,\n    \"noFallthroughCasesInSwitch\": true,\n\n    // Some stricter flags (disabled by default)\n    \"noUnusedLocals\": false,\n    \"noUnusedParameters\": false,\n    \"noPropertyAccessFromIndexSignature\": false\n  }\n}\n"},{"path":"worker.js","tokens":149,"contents":"// worker.js\n\nself.onmessage = (event) =\u003e {\n  const { operation, start, end } = event.data;\n\n  if (operation === 'generate') {\n    const records = [];\n    for (let i = start; i \u003c end; i++) {\n      records.push({ name: `User${i}`, email: `user${i}@example.com` });\n    }\n    self.postMessage(records);\n  } else if (operation === 'select') {\n    // Simulate select operation\n    for (let i = start + 1; i \u003c= end; i++) {\n      // In a real scenario, we might do something with each 'selected' record\n    }\n    self.postMessage('done');\n  }\n};"}],"file_count":6}